<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- **************************** 注解扫描 **************************** -->
    <context:component-scan base-package="com.hsh"/>
    <!-- **************************** /注解扫描 **************************** -->

    <!--日志初始化-->
    <bean id="log4jInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
        <property name="targetMethod" value="initLogging" />
        <property name="arguments">
            <list>
                <value>classpath:logback.xml</value>
            </list>
        </property>
    </bean>

    <!-- 使用disconf必须添加以下配置 -->
    <bean class="com.baidu.disconf.client.DisconfMgrBean" destroy-method="destroy"
          id="disconfMgrBean">
        <property name="scanPackage" value="com.sf"/>
    </bean>
    <bean class="com.baidu.disconf.client.DisconfMgrBeanSecond" destroy-method="destroy"
          id="disconfMgrBean2" init-method="init">
    </bean>

    <!-- 使用托管方式的disconf配置(无代码侵入, 配置更改会自动reload),配置在这里会去配置中心下载对应的文件 -->
    <bean class="com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean"
          id="configproperties_disconf">
        <property name="locations">
            <list>
                <!--多个动态配置配置在这里-->
                <!--<value>classpath:redis.properties</value>-->
                <value>classpath:jdbc.properties</value>
                <value>classpath:system.properties</value>
            </list>
        </property>
    </bean>
    <bean class="com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer"
          id="propertyConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="propertiesArray">
            <list>
                <ref bean="configproperties_disconf"/>
            </list>
        </property>
    </bean>

    <!-- 引入配置文件,这样 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          id="defaultProperty">
        <property name="locations">
            <list>
                <!--配置文件需要在spring采用占位符替换，则需要再次在这里加载配置-->
                <!--<value>classpath:redis.properties</value>-->
                <!--<value>classpath:jdbc.properties</value>-->
                <!--<value>classpath:kafka.properties</value>-->
                <!--<value>classpath:dubbo.properties</value>-->
                <!--<value>classpath:system.properties</value>-->
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="filters" value="stat" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath*:mybatis/mapper/*Mapper.xml"/>
        <!--<property name="configLocation" value="classpath*:mybatis-config.xml" />-->
    </bean>

    <!-- 扫描mybatis映射接口类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hsh.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>




</beans>